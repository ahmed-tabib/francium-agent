; Listing generated by Microsoft (R) Optimizing Compiler Version 19.35.32216.1 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	randomx_argon2_fill_segment_avx2
PUBLIC	randomx_argon2_impl_avx2
;	COMDAT pdata
pdata	SEGMENT
$pdata$randomx_argon2_fill_segment_avx2 DD imagerel $LN22
	DD	imagerel $LN22+501
	DD	imagerel $unwind$randomx_argon2_fill_segment_avx2
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_block DD imagerel fill_block
	DD	imagerel fill_block+1823
	DD	imagerel $unwind$fill_block
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_block DD 01f7719H
	DD	043f85dH
	DD	044e855H
	DD	045d84dH
	DD	046c845H
	DD	047b83dH
	DD	048a835H
	DD	049982dH
	DD	04a8828H
	DD	04b7823H
	DD	04c681eH
	DD	0a33419H
	DD	09a0119H
	DD	0e010f012H
	DD	0c00cd00eH
	DD	06009700aH
	DD	05008H
	DD	imagerel __GSHandlerCheck
	DD	0404H
	DD	020H
	DD	020H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$randomx_argon2_fill_segment_avx2 DD 0b3119H
	DD	0983417H
	DD	08e0117H
	DD	0e00ef010H
	DD	0c00ad00cH
	DD	060077008H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0424H
	DD	040H
	DD	020H
; Function compile flags: /Ogtpy
;	COMDAT randomx_argon2_impl_avx2
_TEXT	SEGMENT
randomx_argon2_impl_avx2 PROC				; COMDAT
; File D:\dev\francium_network\francium_agent\src\ext\randomx\repo\src\argon2_avx2.c
; Line 46
	lea	rax, OFFSET FLAT:randomx_argon2_fill_segment_avx2
; Line 49
	ret	0
randomx_argon2_impl_avx2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT fill_block
_TEXT	SEGMENT
block_XY$ = 0
__$ArrayPad$ = 1024
state$ = 1296
ref_block$ = 1304
next_block$ = 1312
with_xor$ = 1320
fill_block PROC						; COMDAT
; File D:\dev\francium_network\francium_agent\src\ext\randomx\repo\src\argon2_avx2.c
; Line 60
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 1232				; 000004d0H
	vmovaps	XMMWORD PTR [rax-72], xmm6
	vmovaps	XMMWORD PTR [rax-88], xmm7
	vmovaps	XMMWORD PTR [rax-104], xmm8
	vmovaps	XMMWORD PTR [rax-120], xmm9
	vmovaps	XMMWORD PTR [rax-136], xmm10
	vmovaps	XMMWORD PTR [rax-152], xmm11
	vmovaps	XMMWORD PTR [rax-168], xmm12
	vmovaps	XMMWORD PTR [rax-184], xmm13
	vmovaps	XMMWORD PTR [rax-200], xmm14
	vmovaps	XMMWORD PTR [rax-216], xmm15
	lea	rbp, QWORD PTR [rsp+32]
	and	rbp, -32				; ffffffffffffffe0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	mov	r14, rcx
	mov	r12, r8
	lea	rcx, QWORD PTR block_XY$[rbp]
	sub	rdx, r14
	sub	rcx, r14
; Line 64
	mov	r15d, 32				; 00000020H
	test	r9d, r9d
	je	SHORT $LN59@fill_block
; Line 65
	mov	r9, r8
	mov	rax, r14
	sub	r9, r14
	mov	r8d, r15d
	npad	2
$LL4@fill_block:
; Line 66
	vmovdqu	ymm0, YMMWORD PTR [rdx+rax]
	vpxor	ymm1, ymm0, YMMWORD PTR [rax]
	vmovdqu	YMMWORD PTR [rax], ymm1
; Line 68
	vpxor	ymm1, ymm1, YMMWORD PTR [r9+rax]
	vmovdqu	YMMWORD PTR [rcx+rax], ymm1
	lea	rax, QWORD PTR [rax+32]
	sub	r8, 1
	jne	SHORT $LL4@fill_block
; Line 71
	jmp	SHORT $LN77@fill_block
$LN59@fill_block:
; Line 73
	lea	rax, QWORD PTR [r14+32]
	mov	r8d, 16
	npad	2
$LL7@fill_block:
; Line 74
	vmovdqu	ymm0, YMMWORD PTR [rdx+rax-32]
	vpxor	ymm1, ymm0, YMMWORD PTR [rax-32]
	vmovdqu	YMMWORD PTR [rax-32], ymm1
	vmovdqu	ymm0, YMMWORD PTR [rdx+rax]
	vpxor	ymm2, ymm0, YMMWORD PTR [rax]
	vmovdqu	YMMWORD PTR [rax], ymm2
	vmovdqu	YMMWORD PTR [rax+rcx], ymm2
	vmovdqu	YMMWORD PTR [rcx+rax-32], ymm1
	lea	rax, QWORD PTR [rax+64]
	sub	r8, 1
	jne	SHORT $LL7@fill_block
$LN77@fill_block:
	vmovdqu	ymm14, YMMWORD PTR __ymm@0a09080f0e0d0c0b02010007060504030a09080f0e0d0c0b0201000706050403
	vmovdqu	ymm15, YMMWORD PTR __ymm@09080f0e0d0c0b0a010007060504030209080f0e0d0c0b0a0100070605040302
; Line 79
	xor	r13d, r13d
	npad	11
$LL10@fill_block:
; Line 80
	lea	edx, DWORD PTR [r13*8]
	lea	esi, DWORD PTR [rdx+1]
	mov	r10d, edx
	shl	r10, 5
	lea	edi, DWORD PTR [rdx+3]
	shl	rsi, 5
	lea	ebx, DWORD PTR [rdx+2]
	shl	rbx, 5
	lea	r11d, DWORD PTR [rdx+5]
	shl	rdi, 5
	lea	r8d, DWORD PTR [rdx+4]
	shl	r8, 5
	lea	r9d, DWORD PTR [rdx+7]
	vmovdqu	ymm3, YMMWORD PTR [rsi+r14]
	vpmuludq ymm0, ymm3, YMMWORD PTR [r10+r14]
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm3
	vpaddq	ymm10, ymm1, YMMWORD PTR [r10+r14]
	vpxor	ymm0, ymm10, YMMWORD PTR [rdi+r14]
	vpshufd	ymm9, ymm0, 177				; 000000b1H
	vpmuludq ymm0, ymm9, YMMWORD PTR [rbx+r14]
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm9
	vpaddq	ymm5, ymm1, YMMWORD PTR [rbx+r14]
	vpxor	ymm0, ymm5, ymm3
	vpshufb	ymm4, ymm0, ymm14
	shl	r11, 5
	lea	ecx, DWORD PTR [rdx+6]
	shl	r9, 5
	shl	rcx, 5
	vmovdqu	ymm3, YMMWORD PTR [r11+r14]
	vpmuludq ymm0, ymm3, YMMWORD PTR [r8+r14]
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm3
	vpaddq	ymm8, ymm1, YMMWORD PTR [r8+r14]
	vpxor	ymm0, ymm8, YMMWORD PTR [r9+r14]
	vpshufd	ymm7, ymm0, 177				; 000000b1H
	vpmuludq ymm0, ymm7, YMMWORD PTR [rcx+r14]
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm7
	vpaddq	ymm6, ymm1, YMMWORD PTR [rcx+r14]
	vpmuludq ymm1, ymm10, ymm4
	vpxor	ymm0, ymm6, ymm3
	vpshufb	ymm2, ymm0, ymm14
	vpaddq	ymm0, ymm1, ymm1
	vpaddq	ymm1, ymm0, ymm4
	vpaddq	ymm10, ymm1, ymm10
	vpxor	ymm0, ymm9, ymm10
	vpshufb	ymm9, ymm0, ymm15
	vpmuludq ymm0, ymm5, ymm9
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm9
	vpaddq	ymm5, ymm1, ymm5
	vpmuludq ymm0, ymm8, ymm2
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm2
	vpaddq	ymm13, ymm1, ymm8
	vpxor	ymm4, ymm5, ymm4
	vpxor	ymm0, ymm7, ymm13
	vpshufb	ymm12, ymm0, ymm15
	vpmuludq ymm0, ymm6, ymm12
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm12
	vpaddq	ymm3, ymm1, ymm6
	vpaddq	ymm0, ymm4, ymm4
	vpxor	ymm2, ymm3, ymm2
	vpsrlq	ymm1, ymm4, 63				; 0000003fH
	vpxor	ymm1, ymm0, ymm1
	vpermq	ymm6, ymm1, 57				; 00000039H
	vpaddq	ymm0, ymm2, ymm2
	vpsrlq	ymm1, ymm2, 63				; 0000003fH
	vpxor	ymm1, ymm0, ymm1
	vpermq	ymm11, ymm1, 57				; 00000039H
	vpmuludq ymm0, ymm10, ymm6
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm6
	vpaddq	ymm8, ymm1, ymm10
	vpermq	ymm0, ymm9, 147				; 00000093H
	vpxor	ymm1, ymm0, ymm8
	vpermq	ymm4, ymm5, 78				; 0000004eH
	vpermq	ymm2, ymm3, 78				; 0000004eH
	vpshufd	ymm7, ymm1, 177				; 000000b1H
	vpmuludq ymm0, ymm4, ymm7
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm7
	vpaddq	ymm10, ymm1, ymm4
	vpxor	ymm0, ymm10, ymm6
	vpshufb	ymm5, ymm0, ymm14
	vpmuludq ymm1, ymm13, ymm11
	vpaddq	ymm0, ymm1, ymm1
	vpaddq	ymm1, ymm0, ymm11
	vpaddq	ymm6, ymm1, ymm13
	vpermq	ymm0, ymm12, 147			; 00000093H
	vpxor	ymm1, ymm0, ymm6
	vpshufd	ymm4, ymm1, 177				; 000000b1H
	vpmuludq ymm0, ymm2, ymm4
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm4
	vpaddq	ymm9, ymm1, ymm2
	vpmuludq ymm1, ymm8, ymm5
	vpxor	ymm0, ymm11, ymm9
	vpshufb	ymm3, ymm0, ymm14
	vpaddq	ymm0, ymm1, ymm1
	vpaddq	ymm1, ymm0, ymm5
	vpaddq	ymm2, ymm1, ymm8
	vpxor	ymm0, ymm7, ymm2
	vpshufb	ymm8, ymm0, ymm15
	vmovdqu	YMMWORD PTR [r10+r14], ymm2
	vpmuludq ymm0, ymm10, ymm8
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm8
	vpaddq	ymm7, ymm1, ymm10
	vpmuludq ymm0, ymm6, ymm3
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm3
	vpaddq	ymm2, ymm1, ymm6
	vpxor	ymm0, ymm4, ymm2
	vpshufb	ymm6, ymm0, ymm15
	vmovdqu	YMMWORD PTR [r8+r14], ymm2
	vpxor	ymm5, ymm5, ymm7
	vpmuludq ymm0, ymm9, ymm6
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm6
	vpaddq	ymm4, ymm1, ymm9
	vpaddq	ymm0, ymm5, ymm5
	vpxor	ymm3, ymm3, ymm4
	vpsrlq	ymm1, ymm5, 63				; 0000003fH
	vpxor	ymm1, ymm0, ymm1
	vpermq	ymm2, ymm1, 147				; 00000093H
	vpermq	ymm0, ymm7, 78				; 0000004eH
	vmovdqu	YMMWORD PTR [rsi+r14], ymm2
	vmovdqu	YMMWORD PTR [rbx+r14], ymm0
	vpermq	ymm1, ymm8, 57				; 00000039H
	vpsrlq	ymm2, ymm3, 63				; 0000003fH
	vpaddq	ymm0, ymm3, ymm3
	vmovdqu	YMMWORD PTR [rdi+r14], ymm1
	vpxor	ymm1, ymm0, ymm2
	vpermq	ymm2, ymm1, 147				; 00000093H
	inc	r13d
	vpermq	ymm1, ymm6, 57				; 00000039H
	vpermq	ymm0, ymm4, 78				; 0000004eH
	vmovdqu	YMMWORD PTR [r9+r14], ymm1
	vmovdqu	YMMWORD PTR [r11+r14], ymm2
	vmovdqu	YMMWORD PTR [rcx+r14], ymm0
	cmp	r13d, 4
	jb	$LL10@fill_block
; Line 84
	mov	rcx, r14
	lea	rax, QWORD PTR [r14+256]
	mov	edx, 4
$LL34@fill_block:
; Line 85
	vmovdqu	ymm3, YMMWORD PTR [rax]
	vpmuludq ymm0, ymm3, YMMWORD PTR [rcx]
	vmovdqu	ymm2, YMMWORD PTR [rax+256]
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm3
	vpaddq	ymm10, ymm1, YMMWORD PTR [rcx]
	vpxor	ymm0, ymm10, YMMWORD PTR [rax+512]
	vpshufd	ymm9, ymm0, 177				; 000000b1H
	vpmuludq ymm0, ymm9, ymm2
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm9
	vpaddq	ymm8, ymm1, ymm2
	vmovdqu	ymm2, YMMWORD PTR [rax+384]
	vpxor	ymm0, ymm8, ymm3
	vmovdqu	ymm3, YMMWORD PTR [rax+128]
	vpshufb	ymm4, ymm0, ymm14
	vpmuludq ymm0, ymm3, YMMWORD PTR [rax-128]
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm3
	vpaddq	ymm7, ymm1, YMMWORD PTR [rax-128]
	vpxor	ymm0, ymm7, YMMWORD PTR [rax+640]
	vpshufd	ymm5, ymm0, 177				; 000000b1H
	vpmuludq ymm0, ymm5, ymm2
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm5
	vpaddq	ymm6, ymm1, ymm2
	vpxor	ymm0, ymm6, ymm3
	vpshufb	ymm3, ymm0, ymm14
	vpmuludq ymm1, ymm4, ymm10
	vpaddq	ymm0, ymm1, ymm1
	vpaddq	ymm1, ymm0, ymm4
	vpaddq	ymm10, ymm1, ymm10
	vpmuludq ymm2, ymm7, ymm3
	vpxor	ymm0, ymm10, ymm9
	vpshufb	ymm9, ymm0, ymm15
	vpmuludq ymm0, ymm9, ymm8
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm9
	vpaddq	ymm12, ymm1, ymm8
	vpxor	ymm0, ymm4, ymm12
	vpsrlq	ymm1, ymm0, 63				; 0000003fH
	vpaddq	ymm0, ymm0, ymm0
	vpxor	ymm4, ymm0, ymm1
	vpaddq	ymm0, ymm2, ymm2
	vpaddq	ymm1, ymm0, ymm3
	vpaddq	ymm11, ymm1, ymm7
	vpxor	ymm0, ymm11, ymm5
	vpshufb	ymm5, ymm0, ymm15
	vpmuludq ymm0, ymm6, ymm5
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm5
	vpaddq	ymm6, ymm1, ymm6
	vpxor	ymm0, ymm3, ymm6
	vpsrlq	ymm1, ymm0, 63				; 0000003fH
	vpaddq	ymm0, ymm0, ymm0
	vpxor	ymm2, ymm0, ymm1
	vpblendd ymm0, ymm4, ymm2, 204			; 000000ccH
	vpermq	ymm8, ymm0, 177				; 000000b1H
	vpblendd ymm3, ymm4, ymm2, 51			; 00000033H
	vpermq	ymm4, ymm3, 177				; 000000b1H
	vpmuludq ymm0, ymm10, ymm4
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm4
	vpaddq	ymm10, ymm1, ymm10
	vpblendd ymm0, ymm9, ymm5, 204			; 000000ccH
	vpermq	ymm1, ymm0, 177				; 000000b1H
	vpxor	ymm2, ymm1, ymm10
	vpshufd	ymm7, ymm2, 177				; 000000b1H
	vpmuludq ymm0, ymm7, ymm6
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm7
	vpaddq	ymm6, ymm1, ymm6
	vpmuludq ymm1, ymm11, ymm8
	vpxor	ymm0, ymm4, ymm6
	vpblendd ymm3, ymm9, ymm5, 51			; 00000033H
	vpshufb	ymm5, ymm0, ymm14
	vpaddq	ymm0, ymm1, ymm1
	vpaddq	ymm1, ymm0, ymm8
	vpaddq	ymm11, ymm1, ymm11
	vpermq	ymm0, ymm3, 177				; 000000b1H
	vpxor	ymm1, ymm0, ymm11
; Line 84
	lea	rax, QWORD PTR [rax+32]
	lea	rcx, QWORD PTR [rcx+32]
; Line 85
	vpshufd	ymm4, ymm1, 177				; 000000b1H
	vpmuludq ymm0, ymm4, ymm12
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm4
	vpaddq	ymm9, ymm1, ymm12
	vpmuludq ymm1, ymm10, ymm5
	vpxor	ymm0, ymm8, ymm9
	vpshufb	ymm8, ymm0, ymm14
	vpaddq	ymm0, ymm1, ymm1
	vpaddq	ymm1, ymm0, ymm5
	vpaddq	ymm2, ymm1, ymm10
	vpxor	ymm0, ymm7, ymm2
	vpshufb	ymm7, ymm0, ymm15
	vmovdqu	YMMWORD PTR [rcx-32], ymm2
	vpmuludq ymm0, ymm6, ymm7
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm7
	vpaddq	ymm6, ymm1, ymm6
	vpxor	ymm0, ymm5, ymm6
	vpsrlq	ymm1, ymm0, 63				; 0000003fH
	vpaddq	ymm0, ymm0, ymm0
	vpxor	ymm5, ymm0, ymm1
	vpmuludq ymm2, ymm11, ymm8
	vpaddq	ymm0, ymm2, ymm2
	vpaddq	ymm1, ymm0, ymm8
	vpaddq	ymm3, ymm1, ymm11
	vpxor	ymm0, ymm4, ymm3
	vpshufb	ymm4, ymm0, ymm15
	vmovdqu	YMMWORD PTR [rax-160], ymm3
	vpmuludq ymm0, ymm9, ymm4
	vpaddq	ymm0, ymm0, ymm0
	vpaddq	ymm1, ymm0, ymm4
	vpaddq	ymm3, ymm1, ymm9
	vpxor	ymm0, ymm3, ymm8
	vpsrlq	ymm1, ymm0, 63				; 0000003fH
	vpaddq	ymm0, ymm0, ymm0
	vpxor	ymm2, ymm0, ymm1
	vpblendd ymm1, ymm5, ymm2, 204			; 000000ccH
	vpermq	ymm0, ymm1, 177				; 000000b1H
	vmovdqu	YMMWORD PTR [rax-32], ymm0
	vpblendd ymm2, ymm5, ymm2, 51			; 00000033H
	vpermq	ymm1, ymm2, 177				; 000000b1H
	vpblendd ymm0, ymm7, ymm4, 51			; 00000033H
	vmovdqu	YMMWORD PTR [rax+96], ymm1
	vpermq	ymm1, ymm0, 177				; 000000b1H
	vpblendd ymm2, ymm7, ymm4, 204			; 000000ccH
	vpermq	ymm0, ymm2, 177				; 000000b1H
	vmovdqu	YMMWORD PTR [rax+608], ymm0
	vmovdqu	YMMWORD PTR [rax+224], ymm3
	vmovdqu	YMMWORD PTR [rax+352], ymm6
	vmovdqu	YMMWORD PTR [rax+480], ymm1
	sub	rdx, 1
	jne	$LL34@fill_block
; Line 89
	lea	rax, QWORD PTR block_XY$[rbp]
	sub	rax, r14
	sub	r12, r14
	npad	2
$LL58@fill_block:
; Line 90
	vmovdqu	ymm0, YMMWORD PTR [r14+rax]
	vpxor	ymm1, ymm0, YMMWORD PTR [r14]
	vmovdqu	YMMWORD PTR [r14], ymm1
; Line 91
	vmovdqu	YMMWORD PTR [r14+r12], ymm1
	lea	r14, QWORD PTR [r14+32]
	sub	r15, 1
	jne	SHORT $LL58@fill_block
; Line 93
	vzeroupper
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+1232]
	mov	rbx, QWORD PTR [r11+72]
	vmovaps	xmm6, XMMWORD PTR [r11-16]
	vmovaps	xmm7, XMMWORD PTR [r11-32]
	vmovaps	xmm8, XMMWORD PTR [r11-48]
	vmovaps	xmm9, XMMWORD PTR [r11-64]
	vmovaps	xmm10, XMMWORD PTR [r11-80]
	vmovaps	xmm11, XMMWORD PTR [r11-96]
	vmovaps	xmm12, XMMWORD PTR [r11-112]
	vmovaps	xmm13, XMMWORD PTR [r11-128]
	vmovaps	xmm14, XMMWORD PTR [r11-144]
	vmovaps	xmm15, XMMWORD PTR [r11-160]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
fill_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT randomx_argon2_fill_segment_avx2
_TEXT	SEGMENT
position$GSCopy$ = 0
tv349 = 16
state$ = 32
__$ArrayPad$ = 1056
instance$ = 1200
position$ = 1208
randomx_argon2_fill_segment_avx2 PROC			; COMDAT
; File D:\dev\francium_network\francium_agent\src\ext\randomx\repo\src\argon2_avx2.c
; Line 96
$LN22:
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 1136				; 00000470H
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	mov	r14, rcx
	vmovups	xmm0, XMMWORD PTR [rdx]
	vmovups	XMMWORD PTR position$GSCopy$[rbp], xmm0
; Line 104
	test	rcx, rcx
	je	$LN3@randomx_ar
; Line 110
	mov	r15d, DWORD PTR position$GSCopy$[rbp]
	xor	edi, edi
	movzx	r9d, BYTE PTR position$GSCopy$[rbp+8]
	test	r15d, r15d
	jne	SHORT $LN6@randomx_ar
	test	r9b, r9b
	mov	eax, 2
	cmove	edi, eax
$LN6@randomx_ar:
; Line 115
	mov	r10d, DWORD PTR [rcx+20]
; Line 118
	xor	edx, edx
	mov	ecx, DWORD PTR [rcx+24]
	mov	esi, r9d
	mov	rax, QWORD PTR position$GSCopy$[rbp]
	shr	rax, 32					; 00000020H
	imul	eax, ecx
	imul	esi, r10d
	add	eax, edi
	add	esi, eax
	mov	eax, esi
	div	ecx
	test	edx, edx
	jne	SHORT $LN7@randomx_ar
; Line 120
	lea	r8d, DWORD PTR [rcx-1]
	add	r8d, esi
; Line 121
	jmp	SHORT $LN8@randomx_ar
$LN7@randomx_ar:
; Line 124
	lea	r8d, DWORD PTR [rsi-1]
$LN8@randomx_ar:
; Line 127
	mov	edx, r8d
	lea	rax, QWORD PTR state$[rbp]
	shl	rdx, 10
	mov	ecx, 8
	add	rdx, QWORD PTR [r14]
	npad	8
$LL20@randomx_ar:
	lea	rax, QWORD PTR [rax+128]
	vmovups	xmm0, XMMWORD PTR [rdx]
	lea	rdx, QWORD PTR [rdx+128]
	vmovups	XMMWORD PTR [rax-128], xmm0
	vmovups	xmm1, XMMWORD PTR [rdx-112]
	vmovups	XMMWORD PTR [rax-112], xmm1
	vmovups	xmm0, XMMWORD PTR [rdx-96]
	vmovups	XMMWORD PTR [rax-96], xmm0
	vmovups	xmm1, XMMWORD PTR [rdx-80]
	vmovups	XMMWORD PTR [rax-80], xmm1
	vmovups	xmm0, XMMWORD PTR [rdx-64]
	vmovups	XMMWORD PTR [rax-64], xmm0
	vmovups	xmm1, XMMWORD PTR [rdx-48]
	vmovups	XMMWORD PTR [rax-48], xmm1
	vmovups	xmm0, XMMWORD PTR [rdx-32]
	vmovups	XMMWORD PTR [rax-32], xmm0
	vmovups	xmm1, XMMWORD PTR [rdx-16]
	vmovups	XMMWORD PTR [rax-16], xmm1
	sub	rcx, 1
	jne	SHORT $LL20@randomx_ar
; Line 129
	cmp	edi, r10d
	jae	$LN3@randomx_ar
	mov	r13d, DWORD PTR position$GSCopy$[rbp+4]
$LL4@randomx_ar:
; Line 138
	mov	r12, QWORD PTR [r14]
	xor	edx, edx
; Line 141
	mov	ecx, DWORD PTR [r14+28]
	mov	eax, esi
	div	DWORD PTR [r14+24]
	lea	eax, DWORD PTR [rsi-1]
	cmp	edx, 1
	cmovne	eax, r8d
	xor	edx, edx
	mov	QWORD PTR tv349[rbp], rax
	shl	rax, 10
	mov	r8, QWORD PTR [rax+r12]
	mov	rax, r8
	shr	rax, 32					; 00000020H
	div	rcx
	mov	rbx, rdx
; Line 143
	test	r15d, r15d
	jne	SHORT $LN10@randomx_ar
	test	r9b, r9b
	cmove	rbx, r13
$LN10@randomx_ar:
; Line 152
	xor	r9d, r9d
	mov	DWORD PTR position$GSCopy$[rbp+12], edi
	cmp	rbx, r13
	lea	rdx, QWORD PTR position$GSCopy$[rbp]
	mov	rcx, r14
	sete	r9b
	call	randomx_argon2_index_alpha
	mov	edx, eax
; Line 159
	xor	r9d, r9d
	mov	eax, DWORD PTR [r14+24]
	imul	rax, rbx
	mov	r8d, esi
	add	rdx, rax
	shl	r8, 10
	shl	rdx, 10
	add	r8, r12
	add	rdx, r12
	cmp	DWORD PTR [r14+8], 16
	je	SHORT $LN2@randomx_ar
; Line 164
	test	r15d, r15d
	setne	r9b
$LN2@randomx_ar:
; Line 130
	lea	rcx, QWORD PTR state$[rbp]
	call	fill_block
	mov	r8, QWORD PTR tv349[rbp]
	inc	edi
	movzx	r9d, BYTE PTR position$GSCopy$[rbp+8]
	inc	r8d
	inc	esi
	cmp	edi, DWORD PTR [r14+20]
	jb	$LL4@randomx_ar
$LN3@randomx_ar:
; Line 172
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rsp
	call	__security_check_cookie
	mov	rbx, QWORD PTR [rsp+1216]
	add	rsp, 1136				; 00000470H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
randomx_argon2_fill_segment_avx2 ENDP
_TEXT	ENDS
END
